<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="hello" class="com.yc.spring.Hello">  
    </bean>
    
    <bean id="mdao" class="com.yc.spring.dao.MySQLUserDao">  
    </bean>
    
    <bean id="odao" class="com.yc.spring.dao.OracleUserDao">  
    </bean>
    
    
    <!-- 
    Spring 依赖注入(DI)注入的方式有三种
    注入对象属性初始化设置
    1.setter注入(set方法注入)
    2.构造方法注入
    3.接口注入==》SpringMVC大量的应用
    
     -->
     
     <!-- 注入的例子使用的是实体对象，实际开发中很少对实体对象设值 -->
     <bean id="p1" class="com.yc.spring.bean.Person">
          <property name="name" value="武松"></property>
          <property name="age" value="35"></property>
          <property name="killeds">
               <list>
                  <value type="java.lang.String">潘金莲</value>
                  <value >西门庆</value>
                  <value type="java.lang.String">蒋门神</value>
                  <value>null</value>
                  <null></null>
               </list>
          </property>
          <property name="height" value="180"></property>
          <property name="alisa" value="行者"></property>
     </bean>
     
     
     <!-- 构造方法注入 -->
      <bean class="com.yc.spring.bean.Person" primary="true">
           <constructor-arg name="name" value="李逵"></constructor-arg> 
           <constructor-arg name="alisa" value="黑旋风"></constructor-arg> 
           <constructor-arg name="age" value="33"></constructor-arg>  
      </bean>
      
       <bean id="p2" class="com.yc.spring.bean.Person">  
            <property name="name" value="武松"></property>
            <property name="age" value="35"></property>
            <property name="friend" ref="p3">
                
            </property>
       </bean>
       
       <bean id="p3" class="com.yc.spring.bean.Person">
            <property name="name" value="华荣"></property>
       </bean>
       
       <!-- 工厂方法 -->
       <bean id="p4" class="com.yc.spring.bean.Person">
            <property name="name" value="华荣"></property>
       </bean>
       
       
       <!-- scope="singleton" 单例 默认 每次getBean的时候，都会使用同一个bean
            scope="prototype" 原型（多例）每次getBean 的时候，都会创建一个新的bean
                                    其他作用域:session,request.global
            prototype模式每次都会创建新的bean，每次都会调用new or 工厂方法                        
        -->
       <bean id="hello1" class="com.yc.spring.Hello" scope="prototype">
       </bean>
       
       
       <!--lazy-int:懒加载，默认为false,Spring容器在启动时，就会创建所有未配置懒加载bean
           prototype原型模式下默认懒加载
         -->
       <bean id="hello2" class="com.yc.spring.Hello"  lazy-init="true">
            <constructor-arg name="a" value="100"></constructor-arg>
       </bean>
       
       
       <!-- 生命周期方法init初始化   destory销毁一些资源 -->
       <bean id="hello3" class="com.yc.spring.Hello" 
           init-method="init"  destroy-method="destory">
       </bean>
       
       <!-- autowire="default"自动装载，根据一些规则自动的从IOC容器获取属性值 
            byName:用属性名从容器中获取指定id的bean
            byType:用类名从容器中获取指定类型的bean
            constructor:根据构造方法参数的类型获取bean
            default:no 不自动装载
       -->
       <bean id="p7" class="com.yc.spring.bean.Person" autowire="byName">
            <property name="name" value="武松"></property>
            <property name="age" value="35"></property>
       </bean>
       
       <bean id="friend" class="com.yc.spring.bean.Person">
          <property name="name" value="鲁智深"></property>
       </bean>



   


</beans>